package track.view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import global.controller.GlobalControlCodes;
import global.view.View;
import track.TrackErrorCodes;

import javax.swing.*;
import javax.swing.table.TableModel;
import java.awt.*;
import java.awt.event.ActionListener;
import java.text.NumberFormat;
import java.util.Arrays;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;

public class TrackView extends JDialog implements Observer, View {
    private JFrame frame;
    private JPanel contentPane;
    private JButton buttonTrack;
    private JButton buttonCancel;
    private JTextField fieldMin;
    private JLabel labelMin;
    private JLabel labelMax;
    private JTable tableShare;
    private JFormattedTextField fieldMax;

    private String[] columnNames = {
            "Share ID",
            "Trade Code",
            "Company Name",
            "Share Price",
            "Share Value",
            "Share Quantity"};

    public TrackView() {
        $$$setupUI$$$();
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonTrack);
        frame = new JFrame("TrackView");
        frame.setContentPane(contentPane);
        frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        frame.pack();

    }

    public boolean checkFieldsFull() {
        return (!fieldMin.getText().trim().isEmpty()
                || !fieldMax.getText().trim().isEmpty());
    }

    public int[] getFieldValues() {
        int[] values = new int[2];
        values[0] = getMinValue();
        values[1] = getMaxValue();
        return values;
    }

    private int getMinValue() throws NumberFormatException {
        return Integer.parseInt(fieldMin.getText()
                .replaceAll(",", ""));
    }

    private int getMaxValue() {
        return Integer.parseInt(fieldMax.getText().replaceAll(",", ""));
    }

    public void displayTrackingShare() {
        String shareCode = (String) tableShare.getValueAt(tableShare.getSelectedRow(), 1);
        String message = String.format("You are now tracking share: %1$s", shareCode);
    }

    public void displayEmptyFieldError() {
        String message = "Please input value for both Minimum and Maximum";
        displayError(message);
    }

    private void displayInvalidMinValueError() {
        String message = "Minimum value must be between 0 and current price";
        displayError(message);
    }

    private void displayInvalidMaxValueError() {
        String message = " Maximum value must be larger than current price";
        displayError(message);
    }

    private void displayError(String message) {
        JOptionPane.showMessageDialog(null, message
                , "Track Share", JOptionPane.INFORMATION_MESSAGE);
    }


    public void showView() {
        frame.setVisible(true);
    }

    public void closeView() {
        frame.dispose();
    }

    private void updateTable(Vector shareData) {
        Vector colNames = new Vector<>(Arrays.asList(columnNames));
        TableModel tableModel = new global.model.TableModel(shareData, colNames);
        tableShare.setModel(tableModel);
        tableShare.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tableShare.setRowSelectionInterval(0, 0);
    }

    public void setActionListeners(ActionListener actionListener) {
        setTrackButtonListener(actionListener);
        setCancelButtonListener(actionListener);
    }

    private void setTrackButtonListener(ActionListener actionListener) {
        System.out.println("TrackView: adding track listener");
        buttonTrack.addActionListener(actionListener);
        buttonTrack.setActionCommand(GlobalControlCodes.TRACK_SHARE.name());
    }

    private void setCancelButtonListener(ActionListener actionListener) {
        System.out.println("TrackView: adding cancel listener");
        buttonCancel.addActionListener(actionListener);
        buttonCancel.setActionCommand(GlobalControlCodes.TRACK_CLOSE.name());
    }

    public void update(Observable o, Object arg) {
        if (arg instanceof Vector) {
            updateTable((Vector) arg);
        }
        if (arg == TrackErrorCodes.MIN_INVALID) {
            displayInvalidMinValueError();
        }
        if (arg == TrackErrorCodes.MAX_INVALID) {
            displayInvalidMaxValueError();
        }
    }

    private void createUIComponents() {
        fieldMin = new JFormattedTextField(NumberFormat.getNumberInstance());
        fieldMax = new JFormattedTextField(NumberFormat.getNumberInstance());
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(3, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonTrack = new JButton();
        buttonTrack.setText("Track");
        panel2.add(buttonTrack, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        panel2.add(buttonCancel, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        labelMax = new JLabel();
        labelMax.setText("Maximum Value:");
        panel3.add(labelMax, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelMin = new JLabel();
        labelMin.setText("Minimum Value:");
        panel3.add(labelMin, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fieldMin.setText("0");
        panel3.add(fieldMin, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        fieldMax.setText("0");
        panel3.add(fieldMax, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        contentPane.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        tableShare = new JTable();
        tableShare.setPreferredScrollableViewportSize(new Dimension(600, 35));
        tableShare.setShowVerticalLines(false);
        scrollPane1.setViewportView(tableShare);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
