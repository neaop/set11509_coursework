package trade.view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import global.GlobalControlCodes;
import global.view.ShareTraderTable;
import global.view.View;
import global.view.ViewStrings;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.io.Serializable;
import java.util.Observable;
import java.util.Vector;

/**
 * The View element for the trade module.
 */
public class TradeViewForm implements View, Serializable {
    private JFrame frame;
    private JTextField fieldFrom;
    private JTextField fieldTill;
    private JTextField fieldCompany;
    private JButton buttonMenu;
    private JButton buttonSearch;
    private JTable table;
    private JPanel panel;
    private JTextField fieldBuyer;
    private JTextField fieldSellerBuyer;
    private JTextField fieldBroker;


    /**
     * Default constructor.
     */
    public TradeViewForm() {
        frame = new JFrame("ShareView");
        $$$setupUI$$$();
        frame.setContentPane(panel);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.pack();
    }

    @Override
    public void showView() {
        frame.setVisible(true);
    }

    @Override
    public void closeView() {
        frame.dispose();
    }

    /**
     * Set a Controller as the View's ActionListener
     *
     * @param actionListener the Controller to listen to the View
     */
    public void setActionListeners(ActionListener actionListener) {
        setSearchButtonListener(actionListener);
        setMenuButtonListener(actionListener);
    }

    /**
     * Sets a ActionListener for the search button.
     *
     * @param actionListener the Controller to listen to actions
     */

    private void setSearchButtonListener(ActionListener actionListener) {
        System.out.println("TradeView: adding search listener");
        buttonSearch.addActionListener(actionListener);
        buttonSearch.setActionCommand(GlobalControlCodes.TRADE_SEARCH.name());
    }

    /**
     * Sets a ActionListener for the menu button.
     *
     * @param actionListener the Controller to listen to actions
     */
    private void setMenuButtonListener(ActionListener actionListener) {
        System.out.println("TradeView: adding menu listener");
        buttonMenu.addActionListener(actionListener);
        buttonMenu.setActionCommand(GlobalControlCodes.TRADE_CLOSE.name());
    }

    /**
     * Retrieve the text of the from date text field.
     *
     * @return the String from the text field
     */
    public String getFromValue() {
        return fieldFrom.getText();
    }

    /**
     * Retrieve the text of the till date text field.
     *
     * @return the String from the text field
     */
    public String getTillValue() {
        return fieldTill.getText();
    }

    /**
     * Retrieve the text of the company text field.
     *
     * @return the String from the text field
     */
    public String getCompanyValue() {
        return fieldCompany.getText();
    }

    /**
     * Retrieve the text of the seller/buyer text field.
     *
     * @return the String from the text field
     */
    public String getSellerBuyerValue() {
        return fieldSellerBuyer.getText();
    }

    /**
     * Retrieve the text of the broker text field.
     *
     * @return the String from the text field
     */
    public String getBrokerValue() {
        return fieldBroker.getText();
    }

    @Override
    public void update(Observable o, Object arg) {
        if (arg instanceof Vector) {
            populateTable((Vector) arg);
        }
        if (arg.equals(false)) {
            displayDateSyntaxError();
        }
    }

    /**
     * Show an error.
     *
     * @param message the error to be displayed
     */
    private void displayError(String message) {
        JOptionPane.showMessageDialog(null, message
                , "Track Share", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Show an error if a date of incorrect format is entered.
     */
    private void displayDateSyntaxError() {
        displayError("Date must be in style: YYYY-MM-DD");
    }

    /**
     * Show an error if a date of incorrect format is entered.
     */
    private void populateTable(Vector data) {
        Vector columnNames = ViewStrings.getTradeColumnNames();
        ((ShareTraderTable) table).updateTable(data, columnNames);
    }

    /**
     * Instantiation method for custom UI components.
     */
    private void createUIComponents() {
        table = new ShareTraderTable();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(3, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel.add(panel1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonMenu = new JButton();
        buttonMenu.setText("Menu");
        panel1.add(buttonMenu, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        buttonSearch = new JButton();
        buttonSearch.setText("Search");
        panel1.add(buttonSearch, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        table.setPreferredScrollableViewportSize(new Dimension(1000, 250));
        scrollPane1.setViewportView(table);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 6, new Insets(0, 0, 0, 0), -1, -1));
        panel.add(panel2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        fieldFrom = new JTextField();
        panel2.add(fieldFrom, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        fieldTill = new JTextField();
        panel2.add(fieldTill, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        fieldCompany = new JTextField();
        panel2.add(fieldCompany, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Code");
        panel2.add(label1, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("From");
        panel2.add(label2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fieldBroker = new JTextField();
        panel2.add(fieldBroker, new GridConstraints(1, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Broker");
        panel2.add(label3, new GridConstraints(1, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fieldBuyer = new JTextField();
        panel2.add(fieldBuyer, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        fieldSellerBuyer = new JTextField();
        panel2.add(fieldSellerBuyer, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Buyer");
        panel2.add(label4, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("Seller");
        panel2.add(label5, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setText("Till");
        panel2.add(label6, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}
